#!/usr/bin/env ruby
require "lignite"
require "fileutils"
include Lignite::Bytes

def phandles
  handles = $sc.list_open_handles
  puts "OPEN HANDLES: ", hexdump(handles)
end

def upload(local_filename, brick_filename = nil)
  data = File.read(local_filename, encoding: Encoding::BINARY)
  unless brick_filename
    prj = File.basename(local_filename, ".rbf")
    brick_filename = "../prjs/#{prj}/#{prj}.rbf"
  end
  handle = $sc.begin_download(data.bytesize, brick_filename)
  $sc.continue_download(handle, data)
end

def download(brick_filename, local_filename = nil)
  local_filename ||= File.basename(brick_filename)
  fsize, handle, data = $sc.begin_upload(4096, brick_filename)
  File.open(local_filename, "w") do |f|
    loop do
      f.write(data)
      fsize -= data.bytesize
      break if fsize.zero?
      handle, data = $sc.continue_upload(handle, 4096)
    end
  end
end

def list_files(name)
  name ||= "../prjs"
  result = ""
  fsize, handle, data = $sc.list_files(4096, name)
  loop do
    result += data
    fsize -= data.bytesize
    break if fsize.zero?
    handle, data = $sc.continue_list_files(handle, 4096)
  end
  result
end

def run(name)
  slot = Lignite::USER_SLOT
  no_debug = 0
  $dc.block do
    # these are local variables
    data32 :size
    data32 :ip
    file_load_image(slot, name, :size, :ip)
    program_start(slot, :size, :ip, no_debug)
  end
end

def assisted_connection
  Lignite::Connection.create
rescue => e
  fn = Lignite::Connection::Bluetooth.config_filename
  $stderr.puts <<MSG
Could not connect to EV3.
Use a USB cable or configure a Bluetooth address in #{fn.inspect}.
Details:
  #{e.message}
MSG

  template = Lignite::Connection::Bluetooth.template_config_filename
  if !File.exist?(fn) && File.exist?(template)
    FileUtils.mkdir_p(File.dirname(fn))
    FileUtils.install(template, fn)
    $stderr.puts "(A template config file has been copied for your convenience)"
  end
  exit 1
end

conn = assisted_connection
$sc = Lignite::SystemCommands.new(conn)
$dc = Lignite::DirectCommands.new(conn)

case ARGV[0]
when "upload", "ul"
  upload(ARGV[1], ARGV[2])
when "download", "dl"
  download(ARGV[1], ARGV[2])
when "list", "ls"
  print list_files(ARGV[1])
when "run"
  run(ARGV[1])
end
